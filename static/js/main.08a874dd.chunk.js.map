{"version":3,"sources":["assets/Karen.png","components/About.js","components/Work.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","About","react_default","a","createElement","className","id","src","Karen","alt","Work","href","projects","map","project","key","title","img","description","repo","demo","tools","Contact","App","components_About","components_Work","components_Contact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.08a874dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Karen.671677b0.png\";","import React from 'react'\nimport Karen from '../assets/Karen.png'\n\nconst About = () => {\n    return (\n        <section className=\"about-container\">\n            <article className=\"about-me\">\n                <h2 id=\"title\">Hi! I'm Karen Amicone. I love challenges and solving problems with code.</h2>\n                <article id=\"content\">\n                    <p>I'm a frontend developer, but I've also been involved in arts, social sciences and more!</p>\n                    <br></br>\n                    <p>At this moment, I want to work on stimulating projects as a frontend developer, but I want to learn fullstack skills.</p>\n                    <br></br>\n                    <p>As well, I'm interested in women's empowerment, environmental care, neurosciences and traveling.</p> \n                </article>\n                <button className=\"contact-bttn\">Contact</button>\n            </article>\n            <article className=\"photo\">\n                <img src={Karen} alt=\"karen\" className=\"karen\"></img>\n            </article>\n        </section>\n    )\n}\n\nexport default About","import React from 'react'\nimport projects from '../projects.json'\n\nconst Work = () => {\n    return(\n        <section className=\"work\">\n        <article className=\"intro-work\">\n            <h2>Recent Work</h2>\n            <br></br>\n            <p>The last months I studied at Laboratoria, where I made this awesome projects</p>\n            <a href=\"https://github.com/KarenAmicone\">Check all my work on Github</a>\n        </article>\n        <article className=\"work-container\">\n            {projects.map(project=>(\n                <article className=\"card\" key={project.title}>\n                <figure className=\"mockup\">\n                    <img src={project.img}></img>\n                </figure>\n                <article className=\"card-content\">\n                    <h2>{project.title}</h2>\n                    <br></br>\n                    <p>{project.description}</p>\n                </article>\n                \n                <article className=\"card-link\">\n                \n                    <a className=\"link\" href={project.repo}>Repository</a>\n                    <a className=\"link\" href={project.demo}>Demo</a>\n                </article>\n                {<article className=\"tools\">\n                    <h2>Tools</h2>\n                    <p>{project.tools}</p>\n                </article>}\n            </article>\n            ))}\n        </article>\n        </section>\n    )\n}\n\nexport default Work","import React from 'react'\n\nconst Contact = () => {\n    return(\n    <section className=\"contact-container\">\n        <article className=\"contact\">\n            <h2>\"One isn't lazy about what one loves\"</h2>\n            <h4>-Aldous Huxley</h4>\n            <br></br>\n            <a>karen_amicone@hotmail.com</a>\n            <br></br>\n            <ul>\n                <li><a href=\"https://www.instagram.com/karenamicen/\"><img></img></a></li>\n                <li><a><img></img></a></li>\n                <li>Github</li>\n            </ul> \n        </article>\n    </section>\n    )\n}\n\nexport default Contact","import React from 'react'\nimport './App.css'\n//import Intro from './components/Intro'\nimport About from './components/About'\nimport Work from './components/Work'\nimport Contact from './components/Contact'\n\nfunction App() {\n  return (\n    <section>\n      <About/> \n      <Work/> \n      <Contact/>\n    </section> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}